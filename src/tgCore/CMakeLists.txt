CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( tgCore )

# GLFW
FIND_LIBRARY( GLFW_STATIC NAMES libglfw3.a )

FIND_PATH( GLFW_INCLUDE_DIR NAMES GLFW/glfw3.h )

IF( NOT GLFW_STATIC )
    MESSAGE( FATAL_ERROR "GLFW not found!" )
ENDIF()

# OpenGL
FIND_PACKAGE( OpenGL )

IF( NOT OPENGL_FOUND )
    MESSAGE( SEND_ERROR "OpenGL not found!" )
ENDIF()

# glew
FIND_LIBRARY( GLEW_STATIC NAMES libglew32.a libGLEW.a )

FIND_PATH( GLEW_INCLUDE_DIR NAMES GL/glew.h )

IF( NOT GLEW_STATIC )
    MESSAGE( FATAL_ERROR "glew not found!" )
ENDIF()

SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGLEW_STATIC -DGL_EXT_PROTOTYPES" )

# platform dependend stuff
IF( WIN32 )
    SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows" )
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWIN32" )
ENDIF()

SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Bstatic -static-libgcc -static-libstdc++" )

# find source files
FILE(
    GLOB_RECURSE
    SOURCE_FILES
    ABSOLUTE "${CMAKE_CURRENT_SOURCE_DIR}"
    *.cpp
)

# create library
INCLUDE_DIRECTORIES(
    "${CMAKE_CURRENT_SOURCE_DIR}/.."
    ${GLFW_INCLUDE_DIR}
    ${GLEW_INCLUDE_DIR}
)

ADD_LIBRARY( tgCore STATIC ${SOURCE_FILES} )

IF( WIN32 )
    TARGET_LINK_LIBRARIES(
        tgCore
        ${GLFW_STATIC}
        ${GLEW_STATIC}
        ${OPENGL_LIBRARIES}
    )
ELSE()
    TARGET_LINK_LIBRARIES(
        tgCore
        ${GLFW_STATIC}
        ${OPENGL_LIBRARIES}
    )
ENDIF()
